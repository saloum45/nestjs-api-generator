import { exec } from "child_process";

// Fonction pour r√©cup√©rer les tables
export async function getTables(AppDataSource: any): Promise<string[]> {
    try {
        await AppDataSource.initialize();
        console.log("‚úÖ Connect√© √† la base de donn√©es.");

        const tables = await AppDataSource.query("SHOW TABLES");

        return tables.map((row: any) => Object.values(row)[0]);
    } catch (error) {
        console.error("‚ùå Erreur de connexion:", error);
        return [];
    } finally {
        await AppDataSource.destroy();
    }
}

// Fonction pour g√©n√©rer les ressources NestJS
export function generateResources(tables: string[]) {
    tables.forEach((table) => {
        const command = `nest g resource ${table} --no-spec`;
        console.log(`üöÄ G√©n√©ration de la ressource pour ${table}...`);

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå Erreur pour ${table}:`, error.message);
                return;
            }
            if (stderr) {
                console.error(`‚ö†Ô∏è  Avertissement pour ${table}:`, stderr);
            }
            console.log(`‚úÖ ${table} g√©n√©r√© avec succ√®s!\n${stdout}`);
        });
    });
}
